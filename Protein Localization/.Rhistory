else{
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
else{
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
else{
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
}
else{
if(cervical[i, 29] == TRUE){
numberofhpv2 <- numberofhpv2 + 1
value2 <- value2 +1
}
else{
numberofhpv2 <- numberofhpv2
value2 <- value2 +1
}
}
}
mean_cervical_cancer <- value/number
mean_no_cervical_cancer <- value2/number2
mean_cervical_cancer
mean_no_cervical_cancer
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
}
else{
if(cervical[i, 29] == TRUE){
numberofhpv2 <- numberofhpv2 + 1
value2 <- value2 +1
}
else{
numberofhpv2 <- numberofhpv2
value2 <- value2 +1
}
}
}
value
value2
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
}
else{
if(cervical[i, 29] == TRUE){
numberofhpv2 <- numberofhpv2 + 1
value2 <- value2 +1
}
else{
numberofhpv2 <- numberofhpv2
value2 <- value2 +1
}
}
}
value
value2
numberofhpv
numberofhpv2
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
}
else{
if(cervical[i, 29] == TRUE){
numberofhpv2 <- numberofhpv2 + 1
value2 <- value2 +1
}
else{
numberofhpv2 <- numberofhpv2
value2 <- value2 +1
}
}
}
averagehpvcancer <- numberofhpv/value
averagehpvnocancer <- numberofhpv2/value2
averagehpvcancer
averagehpvnocancer
cervical <- arrange(cervical, age)
rm(list = ls())
options(warn=-1)
library(class)
library(ggvis)
library(gmodels)
library(tidyverse)
library(caret)
library(GGally)
library(gridExtra)
setwd("C:/Users/Srikant/Desktop/Data Science/Week 10")
dataset <- read.csv("./ecoli.csv")
#Names (in header of csv) were taken from the documentation of the dataset and manually entered into the .csv file
summary(dataset)
#There is no missing data within the dataset
head(dataset)
glimpse(dataset)
tail(dataset)
#scatterplots
dataset %>% ggvis(~mcg, ~gvh, fill = ~unknown) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~unknown) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(unknown)))
rm(list = ls())
options(warn=-1)
library(class)
library(ggvis)
library(gmodels)
library(tidyverse)
library(caret)
library(GGally)
library(gridExtra)
setwd("C:/Users/Srikant/Desktop/Data Science/Week 10")
dataset <- read.csv("./ecoli.csv")
#Names (in header of csv) were taken from the documentation of the dataset and manually entered into the .csv file
summary(dataset)
#There is no missing data within the dataset
head(dataset)
glimpse(dataset)
tail(dataset)
#scatterplots
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
#set seed for randomization
set.seed(12345)
#Create new column with values 1-8 which will allow us to numerically identify the values in the "pls" column
dataset <- mutate(dataset, variable_class = as.numeric(dataset$pls))
summary(dataset)
#Split the dataset into 1s and 2s (indexing)
ind <- sample(2, nrow(dataset), replace=TRUE, prob=c(.65, .35))
ind
#We are omitting the intrinsically binary values as well as the factor values (euclidean distance cannot be calculated with such values in place)
dataset.training <- dataset[ind==1, c(2:3, 6:8, 10)]
dataset.test <- dataset[ind==2, c(2:3, 6:8, 10)]
summary(dataset.test)
summary(dataset.training)
dataset.trainLabels <- na.omit(dataset[ind==1, 10])
dataset.testLabels <- na.omit(dataset[ind==2, 10])
#building the model
data_pred <- knn(train = dataset.training, test = dataset.test, cl = dataset.trainLabels, k=1)
data_pred
merge <- data.frame(dataset.testLabels, data_pred)
dim(merge)
names <- colnames(dataset.test)
names
final_data <- cbind(dataset.test, merge)
names(final_data) <- c(names, "Observed Class", "Predicted Class")
head(final_data)
view(final_data)
CrossTable(x = dataset.testLabels, y = data_pred, prop.chisq=FALSE)
knitr::opts_chunk$set(echo = TRUE)
summary(dataset)
#There is no missing data within the dataset
head(dataset)
dim(dataset)
glimpse(dataset)
tail(dataset)
knitr::opts_chunk$set(echo = TRUE)
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
#Working Directory
setwd("C:/Users/Srikant/Desktop/Data Science/Week 10")
#Warnings OFF
options(warn=-1)
#Loading libraries
library(class)
library(ggvis)
library(gmodels)
library(tidyverse)
library(caret)
library(GGally)
library(gridExtra)
#Read dataset
dataset <- read.csv("./ecoli.csv")
summary(dataset)
head(dataset)
dim(dataset)
glimpse(dataset)
tail(dataset)
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
plot1 <- dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
plot1 <- dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
#Separate the dataset in to smaller sets for better visualization
#Exclude boolean values
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)), params=list(corSize=12))
plot1 <- dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
plot1 <- dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
#Separate the dataset in to smaller sets for better visualization
#Exclude boolean values
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)), params(list(corSize=12)))
plot1 <- dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
plot1 <- dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
#Separate the dataset in to smaller sets for better visualization
#Exclude boolean values
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)), size = 12)
ggpairs(short1, aes(color=(pls)), params=list(corSize=12))
plot1 <- dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
plot1 <- dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
#Separate the dataset in to smaller sets for better visualization
#Exclude boolean values
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)), size = 8)
ggpairs(short1, aes(color=(pls)), size = 8)
sp1 <- ggplot(data=dataset, aes(x=mcg, y=gvh))
sp1 <- sp + geom_point(aes(col=pls))
sp1 <- ggplot(data=dataset, aes(x=mcg, y=gvh))
sp1 <- sp1 + geom_point(aes(col=pls))
sp1 <- sp1 + labs(title = "Scatterplot of Population by Deaths and Region", y="Population (millions)", x="Deaths")
sp1
#Separate the dataset in to smaller sets for better visualization
#Exclude boolean values
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)), size = 8)
ggpairs(short1, aes(color=(pls)), size = 8)
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
rm(list = ls())
options(warn=-1)
library(class)
library(ggvis)
library(gmodels)
library(tidyverse)
library(caret)
library(GGally)
library(gridExtra)
setwd("C:/Users/Srikant/Desktop/Data Science/Week 10")
dataset <- read.csv("./ecoli.csv")
#Names (in header of csv) were taken from the documentation of the dataset and manually entered into the .csv file
summary(dataset)
#There is no missing data within the dataset
head(dataset)
glimpse(dataset)
tail(dataset)
#scatterplots
dataset %>% ggvis(~mcg, ~gvh, fill = ~pls) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~pls) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(pls)))
ggpairs(short1, aes(color=(pls)))
#set seed for randomization
set.seed(12345)
#Create new column with values 1-8 which will allow us to numerically identify the values in the "pls" column
dataset <- mutate(dataset, variable_class = as.numeric(dataset$pls))
summary(dataset)
#Split the dataset into 1s and 2s (indexing)
ind <- sample(2, nrow(dataset), replace=TRUE, prob=c(.65, .35))
ind
#We are omitting the intrinsically binary values as well as the factor values (euclidean distance cannot be calculated with such values in place)
dataset.training <- dataset[ind==1, c(2:3, 6:8, 10)]
dataset.test <- dataset[ind==2, c(2:3, 6:8, 10)]
summary(dataset.test)
summary(dataset.training)
dataset.trainLabels <- na.omit(dataset[ind==1, 10])
dataset.testLabels <- na.omit(dataset[ind==2, 10])
#building the model
data_pred <- knn(train = dataset.training, test = dataset.test, cl = dataset.trainLabels, k=1)
data_pred
merge <- data.frame(dataset.testLabels, data_pred)
dim(merge)
names <- colnames(dataset.test)
names
final_data <- cbind(dataset.test, merge)
names(final_data) <- c(names, "Observed Class", "Predicted Class")
head(final_data)
view(final_data)
CrossTable(x = dataset.testLabels, y = data_pred, prop.chisq=FALSE)
knitr::opts_chunk$set(echo = TRUE)
#Separate the dataset in to smaller sets for better visualization
#Exclude boolean values
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
plot1 <- ggpairs(short, aes(color=(pls)), size = 8)
plot2 <- ggpairs(short1, aes(color=(pls)), size = 8)
grid.arrange(plot1, plot2)
data_pred <- knn(train = dataset.training, test = dataset.test, cl = dataset.trainLabels, k=1)
data_pred
merge <- data.frame(dataset.testLabels, data_pred)
dim(merge)
names <- colnames(dataset.test)
names
final_data <- cbind(dataset.test, merge)
names(final_data) <- c(names, "Observed Class", "Predicted Class")
#set seed for randomization
set.seed(12345)
#Create new column with values 1-8 which will allow us to numerically identify the values in the "pls" column
dataset <- mutate(dataset, variable_class = as.numeric(dataset$pls))
summary(dataset)
#Split the dataset into 1s and 2s (indexing)
ind <- sample(2, nrow(dataset), replace=TRUE, prob=c(.65, .35))
ind
#We are omitting the intrinsically binary values as well as the factor values (euclidean distance cannot be calculated with such values in place)
dataset.training <- dataset[ind==1, c(2:3, 6:8, 10)]
dataset.test <- dataset[ind==2, c(2:3, 6:8, 10)]
summary(dataset.test)
summary(dataset.training)
dataset.trainLabels <- na.omit(dataset[ind==1, 10])
dataset.testLabels <- na.omit(dataset[ind==2, 10])
#building the model
data_pred <- knn(train = dataset.training, test = dataset.test, cl = dataset.trainLabels, k=1)
data_pred
merge <- data.frame(dataset.testLabels, data_pred)
dim(merge)
names <- colnames(dataset.test)
names
final_data <- cbind(dataset.test, merge)
names(final_data) <- c(names, "Observed Class", "Predicted Class")
CrossTable(x = dataset.testLabels, y = data_pred, prop.chisq=FALSE
CrossTable(x = dataset.testLabels, y = data_pred, prop.chisq=FALSE)
#Separate the dataset in to smaller sets for better visualization
#Exclude boolean values
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
plot1 <- ggpairs(short, aes(color=(pls)), size = 8)
plot2 <- ggpairs(short1, aes(color=(pls)), size = 8)
plot1
plot2
CrossTable(x = dataset.testLabels, y = data_pred, prop.chisq=FALSE)
knitr::opts_chunk$set(echo = TRUE)
CrossTable(x = dataset.testLabels, y = data_pred, prop.chisq=FALSE, format=SPSS)
